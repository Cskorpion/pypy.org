.. title: PyPy v7.3.4: release of python 2.7 and 3.7
.. slug: pypy-v734-release-of-python-27-and-37
.. date: 2021-04-08 05:53:45 UTC
.. tags: release
.. category: 
.. link: 
.. description: 
.. type: rest
.. author: The PyPy Team

==========================================
PyPy v7.3.4: release of python 2.7 and 3.7
==========================================

The PyPy team is proud to release the version 7.3.4 of PyPy, which includes
two different interpreters:

  - PyPy2.7, which is an interpreter supporting the syntax and the features of
    Python 2.7 including the stdlib for CPython 2.7.18+ (the ``+`` is for
    backported security updates)

  - PyPy3.7,  which is an interpreter supporting the syntax and the features of
    Python 3.7, including the stdlib for CPython 3.7.10. We no longer refer to
    this as beta-quality as the last incompatibilities with CPython (in the
    ``re`` module) have been fixed.

We are no longer releasing a Python3.6 version, as we focus on updating to
Python 3.8. We have begun streaming the advances towards this goal on Saturday
evenings European time on https://www.twitch.tv/pypyproject. If Python3.6 is
important to you, please reach out as we could offer sponsored longer term
support.

The two interpreters are based on much the same codebase, thus the multiple
release. This is a micro release, all APIs are compatible with the other 7.3
releases. Highlights of the release include binary **Windows 64** support,
faster numerical instance fields, and a preliminary HPy backend.

A new contributor (Ondrej Baranoviƒç - thanks!) took us up on the challenge to get
`windows 64-bit`_ support.  The work has been merged and for the first time we
are releasing a 64-bit Windows binary package.

The release contains the biggest change to `PyPy's implementation of the
instances of user-defined classes`_ in many years. The optimization was
motivated by the report of performance problems running a `numerical particle
emulation`_. We implemented an optimization that stores ``int`` and ``float``
instance fields in an unboxed way, as long as these fields are type-stable
(meaning that the same field always stores the same type, using the principle
of `type freezing`_). This gives significant performance improvements on
numerical pure-Python code, and other code where instances store many integers
or floating point numbers.

.. _`PyPy's implementation of the instances of user-defined classes`:
   https://www.pypy.org/posts/2010/11/efficiently-implementing-python-objects-3838329944323946932.html
.. _`numerical particle emulation`: https://github.com/paugier/nbabel
.. _`type freezing`: https://www.csl.cornell.edu/~cbatten/pdfs/cheng-type-freezing-cgo2020.pdf

There were also a number of optimizations for methods around strings and bytes,
following user reported performance problems. If you are unhappy with PyPy's
performance on some code of yours, please report `an issue`_!

.. _`an issue`: https://foss.heptapod.net/pypy/pypy/-/issues/

A major new feature is prelminary support for the Universal mode of HPy: a
new way of writing c-extension modules to totally encapsulate ``PyObject*``.
The goal, as laid out in the `HPy documentation`_ and recent `HPy blog post`_,
is to enable a migration path
for c-extension authors who wish their code to be performant on alternative
interpreters like GraalPython_ (written on top of the Java virtual machine),
RustPython_, and PyPy. Thanks to Oracle and IBM for sponsoring work on HPy.

Support for the vmprof_ statistical profiler has been extended to ARM64 via a
built-in backend.

Several issues exposed in the 7.3.3 release were fixed. Many of them came from the
great work ongoing to ship PyPy-compatible binary packages in `conda-forge`_.
A big shout out to them for taking this on.

Development of PyPy takes place on https://foss.heptapod.net/pypy/pypy.
We have seen an increase in the number of drive-by contributors who are able to
use gitlab + mercurial to create merge requests.

The `CFFI`_ backend has been updated to version 1.14.5 and the cppyy_ backend
to 1.14.2. We recommend using CFFI rather than C-extensions to interact with C,
and using cppyy for performant wrapping of C++ code for Python.

As always, we strongly recommend updating to the latest versions. Many fixes
are the direct result of end-user bug reports, so please continue reporting
issues as they crop up.

You can find links to download the v7.3.4 releases here:

    https://pypy.org/download.html

We would like to thank our donors for the continued support of the PyPy
project. If PyPy is not quite good enough for your needs, we are available for
direct consulting work. If PyPy is helping you out, we would love to hear about
it and encourage submissions to our `renovated blog site`_ via a pull request
to https://github.com/pypy/pypy.org

We would also like to thank our contributors and encourage new people to join
the project. PyPy has many layers and we need help with all of them: `PyPy`_
and `RPython`_ documentation improvements, tweaking popular modules to run
on PyPy, or general `help`_ with making RPython's JIT even better. Since the
previous release, we have accepted contributions from 10 new contributors,
thanks for pitching in, and welcome to the project!

If you are a python library maintainer and use C-extensions, please consider
making a cffi / cppyy version of your library that would be performant on PyPy.
In any case both `cibuildwheel`_ and the `multibuild system`_ support
building wheels for PyPy.

.. _`PyPy`: index.html
.. _`RPython`: https://rpython.readthedocs.org
.. _`help`: project-ideas.html
.. _`CFFI`: https://cffi.readthedocs.io
.. _`cppyy`: https://cppyy.readthedocs.io
.. _`multibuild system`: https://github.com/matthew-brett/multibuild
.. _`cibuildwheel`: https://github.com/joerick/cibuildwheel
.. _`blog post`: https://pypy.org/blog/2020/02/pypy-and-cffi-have-moved-to-heptapod.html
.. _`conda-forge`: https://conda-forge.org/blog//2020/03/10/pypy
.. _`documented changes`: https://docs.python.org/3/whatsnew/3.7.html#re
.. _`PyPy 3.7 wiki`: https://foss.heptapod.net/pypy/pypy/-/wikis/py3.7%20status
.. _`wheels on PyPI`: https://pypi.org/project/numpy/#files
.. _`windows 64-bit`: https://foss.heptapod.net/pypy/pypy/-/issues/2073#note_141389
.. _`HPy documentation`: https://hpy.readthedocs.io/en/latest/
.. _`HPy blog post`: https://hpyproject.org/blog/posts/2021/03/hello-hpy/
.. _`GraalPython`: https://github.com/graalvm/graalpython
.. _`RustPython`: https://github.com/RustPython/RustPython
.. _`renovated blog site`: https://pypy.org/blog
.. _vmprof: https://vmprof.readthedocs.io/en/latest/


What is PyPy?
=============

PyPy is a Python interpreter, a drop-in replacement for CPython 2.7, 3.7, and
soon 3.8. It's fast (`PyPy and CPython 3.7.4`_ performance
comparison) due to its integrated tracing JIT compiler.

We also welcome developers of other `dynamic languages`_ to see what RPython
can do for them.

This PyPy release supports:

  * **x86** machines on most common operating systems
    (Linux 32/64 bits, Mac OS X 64 bits, Windows 32/64 bits, OpenBSD, FreeBSD)

  * big- and little-endian variants of **PPC64** running Linux,

  * **s390x** running Linux

  * 64-bit **ARM** machines running Linux.

PyPy does support ARM 32 bit processors, but does not release binaries.

.. _`PyPy and CPython 3.7.4`: https://speed.pypy.org
.. _`dynamic languages`: https://rpython.readthedocs.io/en/latest/examples.html

What else is new?
=================

For more information about the 7.3.4 release, see the `full changelog`_.

Please update, and continue to help us make PyPy better.

Cheers,
The PyPy team

.. _`full changelog`: https://doc.pypy.org/en/latest/release-v7.3.4.html#changelog 
