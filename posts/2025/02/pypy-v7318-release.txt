.. title: PyPy v7.3.18 release
.. slug: pypy-v7318-release
.. date: 2025-02-06 12:00:00 UTC
.. tags: release
.. category: 
.. link: 
.. description: 
.. type: rst
.. author: mattip

=======================================================
PyPy v7.3.18: release of python 2.7, 3.10 and 3.11 beta
=======================================================

The PyPy team is proud to release version 7.3.18 of PyPy.

This release includes a python 3.11 interpreter. We are labelling it "beta"
because it is the first one. In the next release we will drop 3.10 and remove
the "beta" label. There are a particularly large set of bugfixes in this
release thanks to @devdanzin using fusil on the 3.10 builds, originally written
by Victor Stinner. Other significant changes:

- We have updated libffi shipped in our portable builds. We also now statically
  link to libffi where possible which reduces the number of
  shared object dependencies.

- We have added code to be able to show the native function names when
  profiling with VMProf. So far only Linux supports this feature.

- We have added a `PEP 768`_-inspired remote debugging facility.

- The HPy backend has been updated to latest HPy HEAD

The release includes three different interpreters:

- PyPy2.7, which is an interpreter supporting the syntax and the features of
  Python 2.7 including the stdlib for CPython 2.7.18+ (the ``+`` is for
  backported security updates)

- PyPy3.10, which is an interpreter supporting the syntax and the features of
  Python 3.10, including the stdlib for CPython 3.10.16.

- PyPy3.11, which is an interpreter supporting the syntax and the features of
  Python 3.11, including the stdlib for CPython 3.11.11.

The interpreters are based on much the same codebase, thus the triple
release. This is a micro release, all APIs are compatible with the other 7.3
releases. It follows after 7.3.17 release on August 28, 2024.

We recommend updating. You can find links to download the releases here:

    https://pypy.org/download.html

We would like to thank our donors for the continued support of the PyPy
project. If PyPy is not quite good enough for your needs, we are available for
`direct consulting`_ work. If PyPy is helping you out, we would love to hear
about it and encourage submissions to our blog_ via a pull request
to https://github.com/pypy/pypy.org

We would also like to thank our contributors and encourage new people to join
the project. PyPy has many layers and we need help with all of them: bug fixes,
`PyPy`_ and `RPython`_ documentation improvements, or general `help`_ with
making RPython's JIT even better.

If you are a python library maintainer and use C-extensions, please consider
making a HPy_ / CFFI_ / cppyy_ version of your library that would be performant
on PyPy. In any case, both `cibuildwheel`_ and the `multibuild system`_ support
building wheels for PyPy.

.. _`PyPy`: https://doc.pypy.org/
.. _`RPython`: https://rpython.readthedocs.org
.. _`help`: https://doc.pypy.org/en/latest/project-ideas.html
.. _CFFI: https://cffi.readthedocs.io
.. _cppyy: https://cppyy.readthedocs.io
.. _`multibuild system`: https://github.com/matthew-brett/multibuild
.. _`cibuildwheel`: https://github.com/joerick/cibuildwheel
.. _blog: https://pypy.org/blog
.. _HPy: https://hpyproject.org/
.. _direct consulting: https://www.pypy.org/pypy-sponsors.html
.. _`PEP 768`: https://peps.python.org/pep-0768/

VMProf Native Symbol Names
===========================

When running VMProf profiling with native profiling enabled, PyPy did so far
not produce function names for C functions. The output looked like this::

    pypy -m vmprof ~/projects/gitpypy/lib-python/2.7/test/pystone.py
    Pystone(1.1) time for 50000 passes = 0.0109887
    This machine benchmarks at 4.55011e+06 pystones/second
     vmprof output:
     %:      name:                location:
     100.0%  entry_point          <builtin>/app_main.py:874
     100.0%  run_command_line     <builtin>/app_main.py:601
     100.0%  run_toplevel         <builtin>/app_main.py:93
     100.0%  _run_module_as_main  /home/user/bin/pypy-c-jit-170203-99a72243b541-linux64/lib-python/2.7/runpy.py:150
     100.0%  _run_code            /home/user/bin/pypy-c-jit-170203-99a72243b541-linux64/lib-python/2.7/runpy.py:62
     100.0%  <module>             /home/user/bin/pypy-c-jit-170203-99a72243b541-linux64/site-packages/vmprof/__main__.py:1
     100.0%  main                 /home/user/bin/pypy-c-jit-170203-99a72243b541-linux64/site-packages/vmprof/__main__.py:30
     100.0%  run_path             /home/user/bin/pypy-c-jit-170203-99a72243b541-linux64/lib-python/2.7/runpy.py:238
     100.0%  _run_module_code     /home/user/bin/pypy-c-jit-170203-99a72243b541-linux64/lib-python/2.7/runpy.py:75
     100.0%  <module>             /home/user/projects/gitpypy/lib-python/2.7/test/pystone.py:3
     100.0%  main                 /home/user/projects/gitpypy/lib-python/2.7/test/pystone.py:60
     100.0%  pystones             /home/user/projects/gitpypy/lib-python/2.7/test/pystone.py:67
     100.0%  Proc0                /home/user/projects/gitpypy/lib-python/2.7/test/pystone.py:79
     76.9%   <unknown code>
     69.2%   <unknown code>
     53.8%   <unknown code>
     53.8%   <unknown code>
     46.2%   <unknown code>
     46.2%   <unknown code>
     38.5%   <unknown code>
     38.5%   Proc8                /home/user/projects/gitpypy/lib-python/2.7/test/pystone.py:212
     30.8%   <unknown code>
     ...

We can now symbolify these C functions and give function names and which
shared library they come from, at least on Linux::

    Pystone(1.1) time for 50000 passes = 0.218967
    This machine benchmarks at 228345 pystones/second
     vmprof output:
     %:      name:                                           location:
     100.0%  entry_point                                     <builtin>/app_main.py:889
     100.0%  run_command_line                                <builtin>/app_main.py:616
     100.0%  run_toplevel                                    <builtin>/app_main.py:95
     100.0%  _run_module_as_main                             /home/user/projects/gitpypy/lib-python/2.7/runpy.py:150
     100.0%  _run_code                                       /home/user/projects/gitpypy/lib-python/2.7/runpy.py:62
     100.0%  <module>                                        /home/user/projects/gitpypy/site-packages/vmprof/__main__.py:1
     100.0%  main                                            /home/user/projects/gitpypy/site-packages/vmprof/__main__.py:30
     100.0%  run_module                                      /home/user/projects/gitpypy/lib-python/2.7/runpy.py:179
     100.0%  _run_module_code                                /home/user/projects/gitpypy/lib-python/2.7/runpy.py:75
     100.0%  <module>                                        /home/user/projects/gitpypy/lib-python/2.7/test/pystone.py:3
     100.0%  main                                            /home/user/projects/gitpypy/lib-python/2.7/test/pystone.py:60
     100.0%  pystones                                        /home/user/projects/gitpypy/lib-python/2.7/test/pystone.py:67
     100.0%  Proc0                                           /home/user/projects/gitpypy/lib-python/2.7/test/pystone.py:79
     95.5%   n:pypy_g_execute_frame:0:pypy-c
     91.4%   n:pypy_g_PyFrame_dispatch:0:pypy-c
     63.8%   n:pypy_g_PyFrame_dispatch_bytecode:0:pypy-c
     49.8%   Proc1                                           /home/user/projects/gitpypy/lib-python/2.7/test/pystone.py:137
     17.6%   copy                                            /home/user/projects/gitpypy/lib-python/2.7/test/pystone.py:53
     13.6%   n:pypy_g_PyFrame_CALL_FUNCTION:0:pypy-c
     10.4%   Proc8                                           /home/user/projects/gitpypy/lib-python/2.7/test/pystone.py:212
     8.6%    n:pypy_g_STORE_ATTR_slowpath:0:pypy-c

This becomes even more useful when using the `VMProf Firefox converter`_, which
uses the Firefox Profiler Web UI to visualize profiling output:

.. image:: /images/2025-vmprof-firefox.png

.. _`VMProf Firefox converter`: https://github.com/Cskorpion/vmprof-firefox-converter/

What is PyPy?
=============

PyPy is a Python interpreter, a drop-in replacement for CPython
It's fast (`PyPy and CPython`_ performance
comparison) due to its integrated tracing JIT compiler.

We also welcome developers of other `dynamic languages`_ to see what RPython
can do for them.

We provide binary builds for:

* **x86** machines on most common operating systems
  (Linux 32/64 bits, Mac OS 64 bits, Windows 64 bits)

* 64-bit **ARM** machines running Linux (``aarch64``) and macos (``macos_arm64``).

PyPy supports Windows 32-bit, Linux PPC64 big- and little-endian, Linux ARM
32 bit, RISC-V RV64IMAFD Linux, and s390x Linux but does not release binaries.
Please reach out to us if you wish to sponsor binary releases for those
platforms. Downstream packagers provide binary builds for debian, Fedora,
conda, OpenBSD, FreeBSD, Gentoo, and more.

.. _`PyPy and CPython`: https://speed.pypy.org
.. _`dynamic languages`: https://rpython.readthedocs.io/en/latest/examples.html

What else is new?
=================

For more information about the 7.3.18 release, see the `full changelog`_.

Please update, and continue to help us make pypy better.

Cheers,
The PyPy Team

.. _`full changelog`: https://doc.pypy.org/en/latest/release-v7.3.18.html#changelog 
